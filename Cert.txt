Chào bạn, để lấy văn bản từ link GitHub và hiển thị lên web, bạn cần sử dụng JavaScript để thực hiện một yêu cầu fetch.

Tuy nhiên, có một điểm rất quan trọng bạn cần lưu ý:

Link bạn cung cấp (https://github.com/.../blob/main/Cert.txt) là link để xem file trên giao diện của GitHub, nó chứa rất nhiều mã HTML khác chứ không chỉ có nội dung file văn bản.

Để lấy được nội dung thô (raw content) của file, bạn cần dùng link trỏ đến file thô. Bạn có thể lấy link này bằng cách vào trang GitHub trên và nhấn vào nút “Raw”.

Link thô chính xác là: https://raw.githubusercontent.com/Nguyenhuyhoan/Ipaa/main/Cert.txt

Dưới đây là mã HTML và JavaScript hoàn chỉnh để thực hiện việc này.

Mã nguồn hoàn chỉnh

Bạn chỉ cần tạo một file mới (ví dụ: index.html), sao chép toàn bộ mã dưới đây vào, lưu lại và mở bằng trình duyệt web (Chrome, Firefox, Cốc Cốc…).

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hiển thị văn bản từ GitHub</title>
    <style>
        body {
            font-family: sans-serif;
            line-height: 1.6;
            background-color: #f4f4f4;
            color: #333;
            margin: 0;
            padding: 20px;
        }
        .container {
            max-width: 800px;
            margin: auto;
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #0366d6;
        }
        /* Dùng thẻ <pre> để giữ nguyên định dạng, xuống dòng của file text */
        pre {
            background-color: #f6f8fa;
            padding: 15px;
            border-radius: 5px;
            border: 1px solid #ddd;
            white-space: pre-wrap; /* Giúp tự động xuống dòng nếu quá dài */
            word-wrap: break-word;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Nội dung file Cert.txt từ GitHub</h1>
        
        <!-- Nơi nội dung sẽ được hiển thị -->
        <pre id="content">Đang tải nội dung...</pre>
    </div>

    <script>
        // URL trỏ đến file thô (raw file) trên GitHub
        const url = 'https://raw.githubusercontent.com/Nguyenhuyhoan/Ipaa/main/Cert.txt';

        // Sử dụng Fetch API để lấy dữ liệu
        fetch(url)
            .then(response => {
                // Kiểm tra xem yêu cầu có thành công không (status code 200-299)
                if (!response.ok) {
                    throw new Error('Lỗi mạng hoặc không tìm thấy file. Status: ' + response.status);
                }
                // Chuyển đổi response thành dạng văn bản
                return response.text();
            })
            .then(text => {
                // Lấy phần tử có id là 'content'
                const contentElement = document.getElementById('content');
                // Gán nội dung văn bản lấy được vào phần tử đó
                contentElement.textContent = text;
            })
            .catch(error => {
                // Nếu có lỗi xảy ra trong quá trình fetch, hiển thị lỗi
                console.error('Đã xảy ra lỗi khi lấy dữ liệu:', error);
                document.getElementById('content').textContent = 'Không thể tải được nội dung. Vui lòng kiểm tra lại đường dẫn hoặc kết nối mạng.';
            });
    </script>

</body>
</html>

Giải thích mã

	1.	HTML:
	•	Chúng ta tạo một cấu trúc trang web cơ bản.
	•	Phần quan trọng là thẻ <pre id="content">Đang tải nội dung...</pre>.
	•	Thẻ <pre> được dùng để hiển thị văn bản giữ nguyên các khoảng trắng và dấu xuống dòng, rất phù hợp để hiển thị nội dung của một file .txt.
	•	id="content" là định danh để JavaScript có thể tìm thấy và thay đổi nội dung của nó.
	•	Dòng chữ “Đang tải nội dung…” sẽ hiển thị trong lúc chờ dữ liệu được tải về.
	2.	CSS (trong thẻ <style>):
	•	Phần này chỉ dùng để trang trí cho trang web trông đẹp mắt hơn, bạn có thể bỏ qua nếu không cần thiết.
	3.	JavaScript (trong thẻ <script>):
	•	const url = '...': Khai báo biến chứa đường dẫn đến file thô trên GitHub.
	•	fetch(url): Đây là hàm của trình duyệt dùng để gửi yêu cầu đến một URL. Nó hoạt động bất đồng bộ, nghĩa là nó sẽ không chặn các tác vụ khác trong khi chờ phản hồi.
	•	.then(response => ...): Sau khi fetch nhận được phản hồi từ máy chủ, khối lệnh này sẽ được thực thi.
	•	response.ok kiểm tra xem yêu cầu có thành công không. Nếu không, chúng ta tạo ra một lỗi (throw new Error(...)) để nhảy đến khối .catch.
	•	response.text() đọc nội dung của phản hồi và chuyển nó thành một chuỗi văn bản.
	•	.then(text => ...): Khối lệnh này sẽ được thực thi sau khi response.text() hoàn tất. Biến text lúc này chính là nội dung của file Cert.txt.
	•	document.getElementById('content') tìm đến thẻ <pre> của chúng ta.
	•	.textContent = text thay thế dòng chữ “Đang tải nội dung…” bằng nội dung thực sự của file.
	•	.catch(error => ...): Nếu có bất kỳ lỗi nào xảy ra trong quá trình fetch (ví dụ: mất mạng, sai URL), khối lệnh này sẽ được thực thi để
